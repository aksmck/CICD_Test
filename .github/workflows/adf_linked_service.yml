name: Deploy Linked Services

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        type: string
        required: true
      date:
        description: 'Commit date'
        type: string
        required: true

env:
  ENVIRONMENT: ${{ inputs.environment }}
  DATE: ${{ inputs.date }}
  BRANCH: ${{ github.ref_name }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Install Azure CLI Data Factory extension
        run: |
          az extension add --name datafactory

      - name: Get changed files since provided date
        id: changed-files-since
        uses: tj-actions/changed-files@v37
        with:
          since: ${{ env.DATE }}
          files: dataproducts/${{ env.ENVIRONMENT }}/linkedservice

      - name: Validate and debug changed files
        run: |
          CHANGED_FILES=$(echo "${{ steps.changed-files-since.outputs.all_changed_files }}" | tr '\n' ' ')
          echo "Files to process: $CHANGED_FILES"

          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No changed files detected."
            exit 0
          fi

      - name: Deploy Linked Services
        run: |
          CHANGED_FILES=$(echo "${{ steps.changed-files-since.outputs.all_changed_files }}" | tr '\n' ' ')
          echo "Files to process: $CHANGED_FILES"

          # Authenticate with Azure based on the environment
          if [[ $ENVIRONMENT == 'dev' ]]; then
            az login --service-principal --username "${{ secrets.CLIENT_DEV }}" --password "${{ secrets.CLIENTSECRET_DEV }}" --tenant "${{ secrets.TENANT_DEV }}"
            az account set -s "${{ secrets.SUBSCRIPTION_ID_DEV }}"
            FACTORY_NAME="adf-dev-factory"
            RESOURCE_GROUP="rg-dev-resource-group"
          elif [[ $ENVIRONMENT == 'qa' ]]; then
            az login --service-principal --username "${{ secrets.CLIENT_QA }}" --password "${{ secrets.CLIENTSECRET_QA }}" --tenant "${{ secrets.TENANT_QA }}"
            az account set -s "${{ secrets.SUBSCRIPTION_ID_QA }}"
            FACTORY_NAME="adf-qa-factory"
            RESOURCE_GROUP="rg-qa-resource-group"
          elif [[ $ENVIRONMENT == 'prod' ]]; then
            az login --service-principal --username "${{ secrets.CLIENT_PROD }}" --password "${{ secrets.CLIENTSECRET_PROD }}" --tenant "${{ secrets.TENANT_PROD }}"
            az account set -s "${{ secrets.SUBSCRIPTION_ID_PROD }}"
            FACTORY_NAME="adf-prod-factory"
            RESOURCE_GROUP="rg-prod-resource-group"
          else
            echo "Invalid environment: $ENVIRONMENT"
            exit 1
          fi

          az account show
          echo "Logged in successfully."

          for file in $CHANGED_FILES; do
            if [[ -f "$file" ]]; then
              echo "Processing file $file"
              chmod +r "$file"

              linked_service_name=$(basename "$file" .json)
              echo "Deploying linked service $linked_service_name"

              # Construct the URL for deployment
              URL="https://management.azure.com/subscriptions/${{ secrets.SUBSCRIPTION_ID_DEV }}/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.DataFactory/factories/$FACTORY_NAME/linkedservices/$linked_service_name?api-version=2018-06-01"
              echo "Deploying linked service to URL: $URL"

              # Deploy the linked service and capture the response
              response=$(az rest --method PUT --url "$URL" --body @"$file" 2>&1)
              echo "Response: $response"

              # Check for errors in the response
              if echo "$response" | grep -q 'error'; then
                echo "Error deploying linked service: $response"
                exit 1
              else
                echo "Successfully deployed linked service $linked_service_name"
              fi
            else
              echo "File $file not found or invalid"
              exit 1
            fi
          done
