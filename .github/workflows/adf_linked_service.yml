name: Publish ADF Linked Services

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        type: string
        required: true
      date:
        description: 'Commit date'
        type: string
        required: true

env:
  ENVIRONMENT: ${{ inputs.environment }}
  DATE: ${{ inputs.date }}
  BRANCH: ${{ github.ref_name }}

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Install Azure CLI Data Factory extension
        run: |
          az extension add --name datafactory

      - name: Get changed files since the provided date
        id: changed-files-since
        uses: tj-actions/changed-files@v37
        with:
          since: ${{ env.DATE }}
          files: dataproducts/SA_INSIGHTS/linkedservice/*.json

      - name: Debug changed files
        run: |
          echo "Changed files: ${{ steps.changed-files-since.outputs.all_changed_files }}"
          if [[ -z "${{ steps.changed-files-since.outputs.all_changed_files }}" ]]; then
            echo "No changed files detected."
            exit 0
          fi

      - name: Deploy Linked Services
        run: |
          CHANGED_FILES="${{ steps.changed-files-since.outputs.all_changed_files }}"
          echo "Files to process: $CHANGED_FILES"
          
          # Convert newline-separated paths to space-separated
          CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')

          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No linked service changes detected."
            exit 0
          fi

          # Set environment-specific variables
          if [[ $ENVIRONMENT == "dev" ]]; then
            az login --service-principal --username "${{ secrets.CLIENT_ID_DEV }}" --password "${{ secrets.CLIENT_SECRET_DEV }}" --tenant "${{ secrets.TENANT_ID_DEV }}"
            az account set -s "${{ secrets.SUBSCRIPTION_ID_DEV }}"
            FACTORY_NAME="adf-psasdi-westus-dev-01"
            RESOURCE_GROUP="rg-psas-decision-intelligence-westus-dev"
          elif [[ $ENVIRONMENT == "qa" ]]; then
            az login --service-principal --username "${{ secrets.CLIENT_ID_QAT }}" --password "${{ secrets.CLIENT_SECRET_QAT }}" --tenant "${{ secrets.TENANT_ID_QAT }}"
            az account set -s "${{ secrets.SUBSCRIPTION_ID_QAT }}"
            FACTORY_NAME="${{ secrets.FACTORY_NAME_QAT }}"
            RESOURCE_GROUP="${{ secrets.RESOURCE_GROUP_QAT }}"
          elif [[ $ENVIRONMENT == "prod" ]]; then
            az login --service-principal --username "${{ secrets.CLIENT_ID_PROD }}" --password "${{ secrets.CLIENT_SECRET_PROD }}" --tenant "${{ secrets.TENANT_ID_PROD }}"
            az account set -s "${{ secrets.SUBSCRIPTION_ID_PROD }}"
            FACTORY_NAME="${{ secrets.FACTORY_NAME_PROD }}"
            RESOURCE_GROUP="${{ secrets.RESOURCE_GROUP_PROD }}"
          fi

          az account show
          echo "Logged in successfully."

          # Process each changed file
          for file in $CHANGED_FILES; do
              if [[ -f "$file" ]]; then
                  echo "Processing file: $file"
                  chmod +r "$file"
                  
                  linked_service_name=$(basename "$file" .json)
                  echo "Deploying linked service: $linked_service_name"

                  URL="https://management.azure.com/subscriptions/${{ secrets.SUBSCRIPTION_ID_DEV }}/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.DataFactory/factories/$FACTORY_NAME/linkedservices/$linked_service_name?api-version=2018-06-01"
                  echo "Deploying linked service to URL: $URL"

                  # Execute deployment
                  response=$(az rest --method PUT --url "$URL" --body @"$file" 2>&1)
                  echo "Response: $response"

                  # Check for errors in the response
                  if echo "$response" | grep -q '"error"'; then
                      echo "Error deploying linked service $linked_service_name: $response"
                      exit 1
                  else
                      echo "Successfully deployed linked service: $linked_service_name"
                  fi
              else
                  echo "File $file not found or invalid."
                  exit 1
              fi
          done
