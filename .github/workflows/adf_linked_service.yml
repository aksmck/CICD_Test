name: Publish ADF Linked Services
 
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        type: string
        required: true
      function_name:
        description: 'Data source'
        type: string
        required: true
      date:
        description: 'Commit date'
        type: string
        required: true
 
env:
  ENVIRONMENT: ${{ inputs.environment }}
  DATE: ${{ inputs.date }}
  FUNCTION_NAME: ${{ inputs.function_name }}
  BRANCH: ${{ github.ref_name }}
 
jobs:
  publish:
    runs-on: ubuntu-latest
 
    steps:
      # Step to checkout the code from the specified branch
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}  # Checkout the branch that triggered the workflow
 
      # Install Azure CLI
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
 
      # Fetch changed linked service files since the provided date from the branch
      - name: Get changed files since provided date
        id: changed-files-since
        uses: tj-actions/changed-files@v37
        with:
          since: "${{ env.DATE }}"
          files: "dataproducts/${{ env.FUNCTION_NAME }}/linkedservice/"
 
      # Print out the changed files
      - name: Print changed files
        run: |
          echo "Changed files since date: ${{ steps.changed-files-since.outputs.all_changed_files }}"
 
      # Publish ADF Linked Services
      - name: Publish ADF Linked Services
        run: |
          # Authenticate based on the environment
          if [[ $ENVIRONMENT == 'dev' ]]; then
            az login --service-principal --username "${{ secrets.CLIENT }}" --password "${{ secrets.CLIENTSECRET }}" --tenant "${{ secrets.TENANT }}"
            az account set -s ${{ secrets.SUBSCRIPTION_ID }}
            FACTORY_NAME="adf-psasdi-westus-dev-01"
            RESOURCE_GROUP="rg-psas-decision-intelligence-westus-dev"
          elif [[ $ENVIRONMENT == 'qa' ]]; then
            az login --service-principal --username "${{ secrets.CLIENT_ID_QAT }}" --password "${{ secrets.CLIENT_SECRET_QAT }}" --tenant "${{ secrets.TENANT_ID_QAT }}"
            az account set -s ${{ secrets.SUBSCRIPTION_ID_QAT }}
            FACTORY_NAME="${{ secrets.FACTORY_NAME_QAT }}"
            RESOURCE_GROUP="${{ secrets.RESOURCE_GROUP_QAT }}"
          elif [[ $ENVIRONMENT == 'prod' ]]; then
            az login --service-principal --username "${{ secrets.CLIENT_ID_PROD }}" --password "${{ secrets.CLIENT_SECRET_PROD }}" --tenant "${{ secrets.TENANT_ID_PROD }}"
            az account set -s ${{ secrets.SUBSCRIPTION_ID_PROD }}
            FACTORY_NAME="${{ secrets.FACTORY_NAME_PROD }}"
            RESOURCE_GROUP="${{ secrets.RESOURCE_GROUP_PROD }}"
          fi
 
          # Confirm authentication worked
          az account show
          echo "Logged in successfully"
 
          # Step 1: Deploy Linked Services
          CHANGED_FILES="${{ steps.changed-files-since.outputs.all_changed_files }}"
          if [[ -n "$CHANGED_FILES" ]]; then
          for file in $CHANGED_FILES; do
              # Check if the file is in the linkedservice folder and has a .json extension
              if [[ $file == "dataproducts/${{ env.FUNCTION_NAME }}/linkedservice/*" && $file == *".json" ]]; then
              echo "Deploying linked service: $file"
              linked_service_name=${file##*/}  # Extract file name
              linked_service_name=${linked_service_name%.*}  # Remove file extension
              # Use '@' to pass the file content to the az command
              az datafactory linked-service create --factory-name $FACTORY_NAME --resource-group $RESOURCE_GROUP --properties @$file --name "$linked_service_name"
              fi
          done
          else
          echo "No linked service changes detected."
          fi
 
