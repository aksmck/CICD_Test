name: Databricks Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        type: string
        required: true
      date:
        type: string
        required: true
      databricks_deployment_steps:
        type: string
        required: true
      function_name:
        type: string
        required: true

env:
  ENVIRONMENT: ${{ inputs.environment }}
  DATE: ${{ inputs.date }}
  FUNCTION_NAME: ${{ inputs.function_name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step to get changed files since the specified date
      - name: Get changed files since
        id: changed-files-since
        uses: tj-actions/changed-files@v37
        with:
          since: "${{ env.DATE }}"
          files: |
            # Check for changes in common/utils/ if ingestion_utilities is selected
            ${{ contains(inputs.databricks_deployment_steps, 'ingestion_utilities') && 'common/utils/' || '' }}
            
            # Check for changes in dataproducts/${{ inputs.function_name }}/ddl/ if ddl is selected
            ${{ contains(inputs.databricks_deployment_steps, 'ddl') && 'dataproducts/${{ inputs.function_name }}/ddl/' || '' }}
            
            # Check for changes in dataproducts/${{ inputs.function_name }}/dml/ if dml is selected
            ${{ contains(inputs.databricks_deployment_steps, 'dml') && 'dataproducts/${{ inputs.function_name }}/dml/' || '' }}

      # Uninstall the old version of Databricks CLI, if any
      - name: Uninstall old Databricks CLI if exists
        run: |
          pip uninstall -y databricks-cli || true  # Uninstall old versions, avoid errors if it's not installed

      # Install the correct Databricks CLI (v2.x)
      - name: Install Databricks CLI (v2.x)
        run: |
          pip install --upgrade databricks-cli  # Install the latest version (v2.x)

      # Check the installed Databricks CLI version
      - name: Check Databricks CLI version
        run: |
          databricks --version  # This should print the new CLI version (v2.x)

      # Set up Databricks environment variables for authentication (no need for databricks configure)
      - name: Setup Databricks environment
        run: |
          if [ "${{ inputs.environment }}" == 'dev' ]; then
            echo "DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST_DEV }}" >> $GITHUB_ENV
            echo "DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_DEV }}" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == 'qat' ]; then
            echo "DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST_QAT }}" >> $GITHUB_ENV
            echo "DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_QAT }}" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == 'prod' ]; then
            echo "DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST_PROD }}" >> $GITHUB_ENV
            echo "DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_PROD }}" >> $GITHUB_ENV
          fi

      # Configure Databricks CLI with the host and token
      - name: Configure Databricks CLI
        run: |
          echo "$DATABRICKS_HOST\n$DATABRICKS_TOKEN" | databricks configure --token

      # Deploy Databricks Files based on the selected deployment steps
      - name: Deploy Databricks Files
        run: |
          echo "Deploying to Databricks for environment: ${{ inputs.environment }} after date: ${{ inputs.date }}"

          # Set the target path base in Databricks workspace
          BASE_PATH="/Workspace/Users/s2ek20b@mckesson.com/CICD_TEST"

          # Deploy Ingestion Utilities if selected
          if [[ "${{ inputs.databricks_deployment_steps }}" == "ingestion_utilities" || "${{ inputs.databricks_deployment_steps }}" == "all" ]]; then
              echo "Deploying Ingestion Utilities..."
              databricks workspace import_dir "common/utils/" "${BASE_PATH}/common/utils/" --overwrite
          fi

          # Deploy DDL files if selected
          if [[ "${{ inputs.databricks_deployment_steps }}" == "ddl" || "${{ inputs.databricks_deployment_steps }}" == "all" ]]; then
              echo "Deploying DDL files..."
              databricks workspace import_dir "dataproducts/${{ inputs.function_name }}/ddl/" "${BASE_PATH}/dataproducts/${{ inputs.function_name }}/ddl/" --overwrite
          fi

          # Deploy DML files if selected
          if [[ "${{ inputs.databricks_deployment_steps }}" == "dml" || "${{ inputs.databricks_deployment_steps }}" == "all" ]]; then
              echo "Deploying DML files..."
              databricks workspace import_dir "dataproducts/${{ inputs.function_name }}/dml/" "${BASE_PATH}/dataproducts/${{ inputs.function_name }}/dml/" --overwrite
          fi

      # Clean up temporary directories (if needed)
      - name: Clean up temporary directories
        run: |
          echo "Cleaning up temporary directories..."
          rm -rf /tmp/cu/py/
          rm -rf /tmp/cu/ddl_dml/
