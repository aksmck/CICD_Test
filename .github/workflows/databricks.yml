name: Databricks Deployment

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      date:
        type: string
        required: true
      databricks_deployment_steps:
        type: string
        required: true
      function_name:
        type: string
        required: true

env:
  ENVIRONMENT: ${{ inputs.environment }}
  DATE: ${{ inputs.date }}
  FUNCTION_NAME: ${{ inputs.function_name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step to get changed files since the specified date
      - name: Get changed files since
        id: changed-files-since
        uses: tj-actions/changed-files@v37
        with:
          since: "${{ env.DATE }}"
          files: |
            # Check for changes in common/utils/ if ingestion_utilities is selected
            ${{ contains(inputs.databricks_deployment_steps, 'ingestion_utilities') && 'common/utils/' || '' }}
            
            # Check for changes in dataproducts/${{ inputs.function_name }}/ddl/ if ddl is selected
            ${{ contains(inputs.databricks_deployment_steps, 'ddl') && 'dataproducts/${{ inputs.function_name }}/ddl/' || '' }}
            
            # Check for changes in dataproducts/${{ inputs.function_name }}/dml/ if dml is selected
            ${{ contains(inputs.databricks_deployment_steps, 'dml') && 'dataproducts/${{ inputs.function_name }}/dml/' || '' }}

      - name: Install Databricks CLI
        run: pip install databricks-cli

      - name: Setup Databricks environment
        run: |
          if [ "${{ inputs.environment }}" == 'dev' ]; then 
            export DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST_DEV }}
            export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_DEV }}
          elif [ "${{ inputs.environment }}" == 'qat' ]; then
            export DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST_QAT }}
            export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_QAT }}
          elif [ "${{ inputs.environment }}" == 'prod' ]; then
            export DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST_PROD }}
            export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_PROD }}
          fi

      - name: Deploy Databricks Files
        run: |
          echo "Deploying to Databricks for environment: ${{ inputs.environment }} after date: ${{ inputs.date }}"
          
          # Deploy based on the selected step(s)
          # Check for ingestion_utilities or all
          if [[ "${{ inputs.databricks_deployment_steps }}" == "ingestion_utilities" || "${{ inputs.databricks_deployment_steps }}" == "all" ]]; then
              echo "Deploying Ingestion Utilities..."
              databricks workspace import_dir common/utils/ /Shared/sandbox/ --overwrite
          fi
          
          # Check for ddl or all
          if [[ "${{ inputs.databricks_deployment_steps }}" == "ddl" || "${{ inputs.databricks_deployment_steps }}" == "all" ]]; then
              echo "Deploying DDL files..."
              databricks workspace import_dir dataproducts/${{ inputs.function_name }}/ddl/ /Shared/sandbox/ddl_dml/ --overwrite
          fi
          
          # Check for dml or all
          if [[ "${{ inputs.databricks_deployment_steps }}" == "dml" || "${{ inputs.databricks_deployment_steps }}" == "all" ]]; then
              echo "Deploying DML files..."
              databricks workspace import_dir dataproducts/${{ inputs.function_name }}/dml/ /Shared/sandbox/ddl_dml/ --overwrite
          fi

      - name: Clean up temporary directories
        run: |
          echo "Cleaning up temporary directories..."
          rm -rf /tmp/cu/py/
          rm -rf /tmp/cu/ddl_dml/
