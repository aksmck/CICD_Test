name: Databricks Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        type: string
        required: true
      date:
        type: string
        required: true
      databricks_deployment_steps:
        type: string
        required: true
      function_name:
        type: string
        required: true

env:
  ENVIRONMENT: ${{ inputs.environment }}
  DATE: ${{ inputs.date }}
  FUNCTION_NAME: ${{ inputs.function_name }}
  BRANCH: ${{ github.ref_name }}  # Set branch from the GitHub context

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}  # Ensure the correct branch is checked out

      # Step to get changed files since the specified date
      - name: Get changed files since
        id: changed-files-since
        uses: tj-actions/changed-files@v37
        with:
          since: "${{ env.DATE }}"
          files: |
            # Check for changes in common/utils/ if ingestion_utilities is selected
            ${{ contains(inputs.databricks_deployment_steps, 'ingestion_utilities') && 'common/utils/' || '' }}
            
            # Check for changes in dataproducts/${{ inputs.function_name }}/ddls/ if ddl is selected
            ${{ contains(inputs.databricks_deployment_steps, 'ddl') && 'dataproducts/${{ inputs.function_name }}/ddls/' || '' }}
            
            # Check for changes in dataproducts/${{ inputs.function_name }}/dmls/ if dml is selected
            ${{ contains(inputs.databricks_deployment_steps, 'dml') && 'dataproducts/${{ inputs.function_name }}/dmls/' || '' }}

      # Uninstall the old version of Databricks CLI, if any
      - name: Uninstall old Databricks CLI if exists
        run: |
          pip uninstall -y databricks-cli || true  # Uninstall old versions, avoid errors if it's not installed

      # Install the correct Databricks CLI (latest version)
      - name: Install Databricks CLI (latest)
        run: |
          pip install --upgrade databricks-cli  # Install the latest version

      # Check the installed Databricks CLI version
      - name: Check Databricks CLI version
        run: |
          databricks --version  # This should print the new CLI version

      # Set up Databricks environment variables for authentication (no need for databricks configure)
      - name: Setup Databricks environment
        run: |
          if [ "${{ env.ENVIRONMENT }}" == 'dev' ]; then
            echo "DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST_DEV }}" >> $GITHUB_ENV
            echo "DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_DEV }}" >> $GITHUB_ENV
          elif [ "${{ env.ENVIRONMENT }}" == 'qat' ]; then
            echo "DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST_QAT }}" >> $GITHUB_ENV
            echo "DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_QAT }}" >> $GITHUB_ENV
          elif [ "${{ env.ENVIRONMENT }}" == 'prod' ]; then
            echo "DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST_PROD }}" >> $GITHUB_ENV
            echo "DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_PROD }}" >> $GITHUB_ENV
          fi

      # Use environment variables directly in deployment commands without configuring interactively.
      - name: Deploy Databricks Files
        run: |
          echo "Deploying to Databricks for environment: ${{ env.ENVIRONMENT }} after date: ${{ env.DATE }}"

          # Set the target path base in Databricks workspace
          BASE_PATH="/Workspace/Users/s2ek20b@mckesson.com/CICD_TEST"

          # Deploy Ingestion Utilities if selected
          if [[ "${{ inputs.databricks_deployment_steps }}" == "ingestion_utilities" || "${{ inputs.databricks_deployment_steps }}" == "all" ]]; then
              echo "Deploying Ingestion Utilities..."
              databricks workspace import_dir "common/utils/" "${BASE_PATH}/common/utils/" --overwrite 
          fi

          # Deploy DDL files if selected
          if [[ "${{ inputs.databricks_deployment_steps }}" == "ddl" || "${{ inputs.dat
